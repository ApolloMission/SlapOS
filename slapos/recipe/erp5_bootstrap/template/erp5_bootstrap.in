#!%(python_path)s

import httplib
import urllib
import base64
import time

user = "%(user)s"
password = "%(password)s"
host = "%(host)s"
site_id = "%(site_id)s"
mysql_url = "%(sql_connection_string)s"
protocol = "%(protocol)s"
scalability = "%(scalability)s" == "True"

erp5_catalog_storage = 'erp5_mysql_innodb_catalog'

header_dict = {'Authorization': 'Basic %%s' %% \
  base64.encodestring('%%s:%%s' %% (user, password)).strip()}

if protocol == 'https':
  zope_connection = httplib.HTTPSConnection(host)
elif protocol == 'http':
  zope_connection = httplib.HTTPConnection(host)
else:
  raise ValueError("Protocol not implemented")
  
# Check if an ERP5 site is already created, as ERP5 does support having
# 2 instances in the same zope, and this script should not destroy user data
zope_connection.request('GET', '/isERP5SitePresent', headers=header_dict)
result = zope_connection.getresponse()

if result.status == 204: # and (result.read() == "False"):

  # Use a new connection
  if protocol == 'https':
    zope_connection = httplib.HTTPSConnection(host)
  elif protocol == 'http':
    zope_connection = httplib.HTTPConnection(host)
  else:
    raise ValueError("Protocol not implemented")

  # Create the expected ERP5 instance
  zope_connection.request(
    'POST', '/manage_addProduct/ERP5/manage_addERP5Site',
    urllib.urlencode({
      'id': site_id,
      'erp5_catalog_storage': erp5_catalog_storage,
      'erp5_sql_connection_string': mysql_url,
      'cmf_activity_sql_connection_string': mysql_url,
    }),
    headers=header_dict)
  # Wait for the erp5 response, to prevent multiple requests
  # been done by the same script.
  result = zope_connection.getresponse()

  # Read result make sure the site really finished to
  # created the ERP5 site.
  print result.read()
  print "ERP5 site created."


#dirty way to wait erp5 site creation
time.sleep(30)


# Scalability: Install and configure small buisiness
if scalability:
  print "Scalability case"
  # Here check if configurator is available
  configurator_available = False
  if not configurator_available:
    # Fix site consistency
    if protocol == 'https':
      zope_connection = httplib.HTTPSConnection(host)
    elif protocol == 'http':
      zope_connection = httplib.HTTPConnection(host)
    else:
      raise ValueError("Protocol not implemented")
    zope_connection.request(
      'GET', '/%%s/ERP5Site_launchFixConfigurationConsistency' %%(site_id),
      headers=header_dict
    )
    
    print "Check consistency sent"
    result = zope_connection.getresponse()
    print result.read()
    print "Response read"

  # Dirty way to wait configurator availability
  time.sleep(30)
  
  # Here check if configurator is available
  # Send a request ? How to know if it is ready/available ?
  configurator_available = False
  # Here check if S&MB not already installed
  configurator_already_applied = False

  business_object_name = "default_standard_configuration"
  if configurator_available and not configurator_already_applied:
    # install small and medium business via configurator
    if protocol == 'https':
      zope_connection = httplib.HTTPSConnection(host)
    elif protocol == 'http':
      zope_connection = httplib.HTTPConnection(host)
    else:
      raise ValueError("Protocol not implemented")
      https://192.168.241.110:2153/erp5/business_configuration_module/view
    zope_connection.request(
      'GET', '/%%s/business_configuration_module/%%s/build' %%(business_object_name, site_id),
      headers=header_dict
    )
    print "Business building sent"
    print result.read()
    print "Response read"

    time.sleep(20)

    # install small and medium business via configurator
    if protocol == 'https':
      zope_connection = httplib.HTTPSConnection(host)
    elif protocol == 'http':
      zope_connection = httplib.HTTPConnection(host)
    else:
      raise ValueError("Protocol not implemented")
      https://192.168.241.110:2153/erp5/business_configuration_module/view
    zope_connection.request(
      'GET', '/%%s/business_configuration_module/%%s/install' %%(business_object_name, site_id),
      headers=header_dict
    )
    print "Business building sent"
    print result.read()
    print "Response read"



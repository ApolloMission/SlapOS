[buildout]
parts =
  postgres-instance
  postgres-promise
  postgres-backup
  cron-postgres-backup


# Define egg directories to be the one from Software Release
# (/opt/slapgrid/...)
eggs-directory = ${buildout:eggs-directory}
develop-eggs-directory = ${buildout:develop-eggs-directory}
offline = true




#----------------
#--
#-- Creates a Postgres cluster, configuration files, and a database.

[postgres-instance]
recipe = slapos.cookbook:postgres

# Options
ipv4 = $${instance-parameters:ipv4}
superuser = postgres
password = $${postgres-passwd:passwd}
port = 5432
dbname = db
# pgdata-directory is created by initdb, and should not exist beforehand. Mandatory parameter.
pgdata-directory = $${directories:var}/pgdata
bin = ${postgresql91:location}/bin
services = $${directories:services}

template-postgresql-conf =
    # This configuration file is generated by a SlapOS instance profile. Manual edits will be overwritten.
    listen_addresses = '{ipv4_listen_addresses}'
    port = $${:port}
    logging_collector = on
    log_rotation_size = 50MB
    max_connections = 100
    datestyle = 'iso, mdy'
    lc_messages = 'en_US.UTF-8'
    lc_monetary = 'en_US.UTF-8'
    lc_numeric = 'en_US.UTF-8'
    lc_time = 'en_US.UTF-8'
    default_text_search_config = 'pg_catalog.english'
    unix_socket_directory = '{unix_socket_directory}'
    unix_socket_permissions = 0700
    # backup
    wal_level = hot_standby
    max_wal_senders = 2


template-pg-hba-conf =
    # This configuration file is generated by a SlapOS instance profile. Manual edits will be overwritten.
    # TYPE  DATABASE        USER            ADDRESS                 METHOD
    # "local" is for Unix domain socket connections only (check unix_socket_permissions!)
    local   all             all                                     trust
    #do not conflict with other postgres instances on the same node
    #host    all             all             127.0.0.1/32            md5
    {ipv4_auth}
    local   replication     postgres                                 trust

template-hba-ipv4 =
    host    all             all             {ip}/32                   md5



#----------------
#--
#-- Generates a random password and stores it in the filesystem

[postgres-passwd]
recipe = slapos.cookbook:generate.password
storage-path = $${directories:srv}/postgres_passwd
bytes = 16


#----------------
#--
#-- Deploy promise scripts.

[postgres-promise]
recipe = slapos.cookbook:check_port_listening
path = $${directories:promises}/postgres
hostname = $${instance-parameters:ipv4-random}
port = $${postgres-instance:port}


#----------------
#--
#-- Fetches parameters defined in SlapOS Master for this instance

[instance-parameters]
recipe = slapos.cookbook:slapconfiguration
computer = $${slap-connection:computer-id}
partition = $${slap-connection:partition-id}
url = $${slap-connection:server-url}
key = $${slap-connection:key-file}
cert = $${slap-connection:cert-file}


#[postgres-backup-sql]
#recipe = slapos.recipe.template:jinja2
#template = inline:
#    #!/bin/bash
#    . {{environment}}
#    {{postgres_bin}}/pg_dumpall --clean --file=$${directories:backup}/dumpall
#    echo "backup done"
#rendered = $${directories:bin}/postgres-backup
#mode = 700
#context =
#    raw     environment     $${buildout:directory}/environment.sh
#    raw     postgres_bin    $${postgres-instance:bin}



[postgres-status]
recipe = slapos.recipe.template:jinja2
template = inline:
    #!/bin/sh
    extranet_part=`pwd | grep -o slappart[0-9+] | tail -1`
    /opt/slapos/bin/slapos node supervisorctl --cfg ../../../../etc/slapos.cfg status $extranet_part:postgres-start-on-watch
rendered = $${directories:bin}/postgres-status
mode = 700

[postgres-stop]
recipe = slapos.recipe.template:jinja2
template = inline:
    #!/bin/sh
    extranet_part=`pwd | grep -o slappart[0-9+] | tail -1`
    /opt/slapos/bin/slapos node supervisorctl --cfg ../../../../etc/slapos.cfg stop $extranet_part:postgres-start-on-watch
rendered = $${directories:bin}/postgres-stop
mode = 700

[postgres-start]
recipe = slapos.recipe.template:jinja2
template = inline:
    #!/bin/sh
    extranet_part=`pwd | grep -o slappart[0-9+] | tail -1`
    /opt/slapos/bin/slapos node supervisorctl --cfg ../../../../etc/slapos.cfg start $extranet_part:postgres-start-on-watch
rendered = $${directories:bin}/postgres-start
mode = 700


[postgres-restore]
recipe = slapos.recipe.template:jinja2
template = inline:
    #!/bin/bash
    . {{environment}}
    # shut down postgres
    backup_dir={{backup_dir}}
    [ -n "$1" ] && backup_dir="$1"
    $${directories:bin}/postgres-stop
    # check that postgres is down or refuse to run
    $${directories:bin}/postgres-status | grep STOPPED || exit 10
    echo "restoring from $backup_dir"
    mv {{pgdata}}/pg_hba.conf {{pgdata}}/hba.conf
    rm -rf {{pgdata}}/pg_* {{pgdata}}/base {{pgdata}}/global {{pgdata}}/PG_VERSION
    mv {{pgdata}}/hba.conf {{pgdata}}/pg_hba.conf
    cp -a $backup_dir/pg_* $backup_dir/base $backup_dir/global $backup_dir/PG_VERSION {{pgdata}}/
    echo "restore done"
    echo "SELECT 1" | postgres --single -D {{pgdata}} {{dbname}} || (rm {{pgdata}}/postmaster.pid; pg_resetxlog -f {{pgdata}})
    for table in blob partenaire contact visite; do
        echo "COPY (SELECT COUNT(*) FROM $table) To '{{pgdata}}/$table.count' (format csv, delimiter ';')" | postgres --single -D {{pgdata}} {{dbname}}
    done
rendered = $${directories:bin}/postgres-restore
mode = 700
context =
    raw     dbname          extranet_spr_production
    raw     environment     $${buildout:directory}/environment.sh
    raw     postgres_bin    $${postgres-instance:bin}
    raw     pgdata          $${postgres-instance:pgdata-directory}
    raw     backup_dir      $${directories:backup}



[postgres-backup]
recipe = slapos.recipe.template:jinja2
template = inline:
    #!/bin/bash
    . {{environment}}
    rm -rf {{backup_dir}}
    {{postgres_bin}}/pg_basebackup -D {{backup_dir}} -x -U postgres
    echo "backup done"
rendered = $${directories:bin}/postgres-backup
mode = 700
context =
    raw     environment     $${buildout:directory}/environment.sh
    raw     postgres_bin    $${postgres-instance:bin}
    raw     backup_dir      $${directories:backup}






[cron-postgres-backup]
<= cron
recipe = slapos.cookbook:cron.d
name = postgres-backup
frequency = 0 3 * * *
command = $${postgres-backup:rendered}


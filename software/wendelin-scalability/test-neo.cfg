# The 'start_ingest' command causes a zope to fill NEO as fast as possible,
# as if fluentd pushed data.
#
# Use sigma > 0 to have oids of variable size inside NEO.
# To know average compression ratio:
#   x=test_scalability_fluentd/ExtensionTemplateItem/portal_components/extension.erp5.ScalabilityFluentd.py
#   $x 10 1
#   0.434851958247
#   2155 - 65536 (99th percentile)
#   $x 8.787 0
#   0.100036621094
#   6556

[buildout]
extends = test-common.cfg
parts += start_ingest

[start_ingest]
recipe = slapos.recipe.template:jinja2
rendered = ${buildout:bin-directory}/${:_buildout_section_name_}
mode = 0755
template =
  inline:#!${buildout:executable}
  import argparse, base64, httplib, sys
  parser = argparse.ArgumentParser()
  _ = parser.add_argument
  _('--site-id', default='erp5')
  _('hostport', metavar='host[:port]', help='Zope address')
  _('password', help="'zope' user password")
  _('reference', help='Data Stream reference')
  _('mu', type=float)
  _('sigma', type=float)
  _('chunks_per_transaction', nargs='?', type=int, help='default: 128 (8 MiB)')
  args = parser.parse_args()
  qs = []
  for k in 'reference', 'mu', 'sigma', 'chunks_per_transaction':
    v = getattr(args, k)
    if v is not None:
      t = type(v)
      qs.append('%s=%s' % (k if t is str else k + ':' + t.__name__, v))
  c = httplib.HTTPConnection(args.hostport)
  c.putrequest('GET', '/%s/ERP5Site_simulateFluentdIngestion?%s'
                      % (args.site_id, '&'.join(qs)))
  c.putheader('Authorization',
    'Basic ' + base64.b64encode('zope:'+args.password))
  c.endheaders()

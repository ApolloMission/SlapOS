#
# Deploy LTE instance
#
[buildout]
parts =
  directory
  publish-connection-parameter
  lte-launcher

eggs-directory = {{ buildout['eggs-directory'] }}
develop-eggs-directory = {{ buildout['develop-eggs-directory'] }}
offline = true


[instance]
recipe = slapos.cookbook:slapconfiguration
computer = ${slap_connection:computer_id}
partition = ${slap_connection:partition_id}
url = ${slap_connection:server_url}
key = ${slap_connection:key_file}
cert = ${slap_connection:cert_file}

configuration.frequency
configuration.TRX
configuration.log_size = 50M

[directory]
recipe = slapos.cookbook:mkdirectory
home = ${buildout:directory}
mme = ${:home}/mme
ims = ${:home}/ims
enb = ${:home}/enb
etc = ${:home}/etc
var = ${:home}/var
run = ${:var}/run
script = ${:etc}/run
service = ${:etc}/service
promise = ${:etc}/promise
log = ${:var}/log


### MME ############################################################################################
[lte-mme-log]
recipe = slapos.cookbook:wrapper
command = {{ buildout['directory'] }}/ltelogs.sh {{ directory['log'] }}/mme.log
destination = ${directory:script}/lte-mme-log
mode = 0775
pidfile = {{ directory['log'] }}/mme.log.clean
remove_pidfile = true

[lte-mme-socket]
recipe = slapos.cookbook:wrapper
command = mkfifo {{ directory['run'] }}/mme.sock; cat > {{ directory['run'] }}/mme.sock
destination = ${directory:service}/lte-mme-socket
mode = 0775
cleanup_command = rm -f {{ directory['run'] }}/mme.sock

[lte-mme-service]
recipe = slapos.cookbook:wrapper
command = {{ directory['mme'] }}/ltemme \\
  {{ directory['mme'] }}/config/mme.cfg \\
  < {{ directory['run'] }}/mme.sock \\
wrapper-path = ${directory:script}/lte-mme
mode = 0775
pidfile = {{ directory['run'] }}/mme.pid
remove_pidfile = true
wait-for-files = 
  {{ directory['run'] }}/mme.sock
  {{ directory['log'] }}/mme.log.clean

[lte-mme-service-log]
# MME binary needs upon startup on its STDIN a command where it should log
recipe = slapos.cookbook:wrapper
command = echo "log file.rotate={{ instance['configuration.log_size'] }},file.path={{ directory['log'] }}"\\
  > {{ directory['run'] }}/mme.sock
destination = ${directory:script}/lte-mme-service-log
wait-for-files = 
  {{ directory['run'] }}/mme.sock
  {{ directory['run'] }}/mme.pid


### IMS ############################################################################################
[lte-ims-service]
recipe = slapos.cookbook:wrapper
command = {{ directory['ims'] }}/ims \\
  {{ directory['ims'] }}/config/ims.cfg \\
  < {{ directory['run'] }}/ims.sock
wrapper-path = ${directory:script}/lte-ims
mode = 0775
pidfile = {{ directory['run'] }}/ims.pid
remove_pidfile = true
wait-for-files = 
  {{ directory['run'] }}/ims.sock
  {{ directory['log'] }}/ims.log.clean

[lte-ims-log]
recipe = slapos.cookbook:wrapper
command = {{ buildout['directory'] }}/ltelogs.sh {{ directory['log'] }}/ims.log
destination = ${directory:script}/lte-ims-log
mode = 0775
pidfile =  {{ directory['log'] }}/ims.log.clean
remove_pidfile = true

[lte-ims-socket]
recipe = slapos.cookbook:wrapper
command = mkfifo {{ directory['run'] }}/ims.sock; cat > {{ directory['run'] }}/ims.sock
destination = ${directory:service}/lte-ims-socket
mode = 0775
cleanup_command = rm -f {{ directory['run'] }}/ims.sock

[lte-ims-service-log]
# ims binary needs upon startup on its STDIN a command where it should log
recipe = slapos.cookbook:wrapper
command = echo "log file.rotate={{ instance['configuration.log_size'] }},file.path={{ directory['log'] }}"\\
  > {{ directory['run'] }}/ims.sock
destination = ${directory:script}/lte-ims-service-log
wait-for-files = 
  {{ directory['run'] }}/ims.sock
  {{ directory['run'] }}/ims.pid

[lte-register-ims-with-mme]
recipe = slapos.cookbook:wrapper
command = echo "imsconnect" > {{ directory['run'] }}/mme.sock; echo "t" > {{ directory['run'] }}/ims.sock; 
destination = ${directory:script}/lte-ims-register
wait-for-files = 
  {{ directory['run'] }}/mme.sock
  {{ directory['run'] }}/ims.sock
  {{ directory['run'] }}/ims.pid


### eNodeB (enb) ###################################################################################
[lte-enb-service]
recipe = slapos.cookbook:wrapper
command = {{ directory['enb'] }}/enb \\
  {{ directory['enb'] }}/config/enb.cfg \\
  < {{ directory['run'] }}/enb.sock
wrapper-path = ${directory:script}/lte-enb
mode = 0775
pidfile = {{ directory['run'] }}/enb.pid
remove_pidfile = true
wait-for-files = 
  {{ directory['run'] }}/enb.sock
  {{ directory['log'] }}/enb.log.clean

[lte-enb-log]
recipe = slapos.cookbook:wrapper
command = {{ buildout['directory'] }}/ltelogs.sh {{ directory['log'] }}/enb.log
destination = ${directory:script}/lte-enb-log
mode = 0775
pidfile =  {{ directory['log'] }}/enb.log.clean
remove_pidfile = true

[lte-enb-socket]
recipe = slapos.cookbook:wrapper
command = mkfifo {{ directory['run'] }}/enb.sock; cat > {{ directory['run'] }}/enb.sock
destination = ${directory:service}/lte-enb-socket
mode = 0775
cleanup_command = rm -f {{ directory['run'] }}/enb.sock

[lte-enb-service-log]
# enb binary needs upon startup on its STDIN a command where it should log
recipe = slapos.cookbook:wrapper
command = echo "log file.rotate={{ instance['configuration.log_size'] }},file.path={{ directory['log'] }}"\\
  > {{ directory['run'] }}/enb.sock; echo "t" > {{ directory['run'] }}/enb.sock
destination = ${directory:script}/lte-enb-service-log
wait-for-files = 
  {{ directory['run'] }}/enb.sock
  {{ directory['run'] }}/enb.pid


#### continue for services MBMS and UE 
#### using ltestart.jinja2.sh template from line 200

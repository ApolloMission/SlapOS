[buildout]
extends =
  ../gcc/buildout.cfg
  ../unzip/buildout.cfg
parts =
  bazel
# The bazel binary contains a zip file. It must not be stripped.
do-not-strip-path = ${buildout:parts-directory}/bazel/bin/bazel

# [jdk]
# recipe = slapos.recipe.build
# url = http://download.oracle.com/otn-pub/java/jdk/8u112-b15/jdk-8u112-linux-x64.tar.gz
# md5sum = de9b7a90f0f5a13cfcaa3b01451d0337
# location = ${buildout:parts-directory}/${:_buildout_section_name_}
# java_home = ${:location}/java_home
# script =
#   from zc.buildout.download import check_md5sum, ChecksumError
#   download_dir = tempfile.mkdtemp()
#   download_path = os.path.join(download_dir, 'jdk.tar.gz')
#   self.cleanup_list.append(download_dir)
#   call(['wget', '-q', '-O', download_path, '--header', 'Cookie: oraclelicense=accept-securebackup-cookie', self.options['url']])
#   if not check_md5sum(download_path, self.options['md5sum']):raise ChecksumError()
#   extract_dir = self.extract(download_path)
#   java_home = '%(location)s/java_home'
#   self.copyTree(os.path.join(extract_dir, 'jdk1.8.0_112'), java_home)

[template-bazel-crosstool]
recipe = slapos.recipe.template:jinja2
location = ${buildout:parts-directory}/${:_buildout_section_name_}
mode = 640
filename = bazel_tools_cpp_CROSSTOOL
template = ${:_profile_base_location_}/${:filename}.in
rendered = ${:location}/${:filename}
cpp_path = ${gcc:location}/bin/cpp
gcc_path = ${gcc:location}/bin/gcc
gconv_path = ${gcc:location}/bin/gconv
include_path = ${gcc:location}/include
gcc_lib64_path = ${gcc:location}/lib64
context =
    key cpp_path template-bazel-crosstool:cpp_path
    key gcc_path template-bazel-crosstool:gcc_path
    key gconv_path template-bazel-crosstool:gconv_path
    key include_path template-bazel-crosstool:include_path
    key gcc_lib64_path template-bazel-crosstool:gcc_lib64_path

[python2.7]
# link to gcc libraries to solve GLIBXXX undefined reference error.
environment =
  PATH=${patch:location}/bin:${xz-utils:location}/bin:%(PATH)s
  CPPFLAGS=-I${zlib:location}/include -I${readline:location}/include -I${libexpat:location}/include -I${libffi:location}/include -I${ncurses:location}/include -I${ncurses:location}/include/ncursesw -I${bzip2:location}/include  -I${gdbm:location}/include -I${openssl:location}/include -I${sqlite3:location}/include -I${gettext:location}/include
  LDFLAGS=-L${zlib:location}/lib -L${readline:location}/lib -L${libexpat:location}/lib -L${libffi:location}/lib -L${ncurses:location}/lib -L${bzip2:location}/lib -L${gdbm:location}/lib -L${openssl:location}/lib -L${sqlite3:location}/lib -Wl,-rpath=${zlib:location}/lib -Wl,-rpath=${readline:location}/lib -Wl,-rpath=${libexpat:location}/lib -Wl,-rpath=${libffi:location}/lib -Wl,-rpath=${ncurses:location}/lib -Wl,-rpath=${bzip2:location}/lib -Wl,-rpath=${gdbm:location}/lib -Wl,-rpath=${openssl:location}/lib -Wl,-rpath=${sqlite3:location}/lib -L${gettext:location}/lib -Wl,-rpath=${gettext:location}/lib -Wl,-rpath=${file:location}/lib -Wl,-rpath=${gcc:location}/lib64


[bazel]
recipe = slapos.recipe.build
url = https://github.com/bazelbuild/bazel/releases/download/0.4.3/bazel-0.4.3-dist.zip
md5sum = cbd53f6f59915506da8998dab2098921
patch-binary = ${patch:location}/bin/patch
patch-file-path = ${:_profile_base_location_}/bazel-0.4.3.patch
bazel-crosstool-modified-file-path = ${template-bazel-crosstool:rendered}
unzip-bin = ${unzip:location}/bin
zip-bin = ${zip:location}/bin
gcc-bin = ${gcc:location}/bin
gcc-lib = ${gcc:location}/lib
gcc-lib64 = ${gcc:location}/lib64
java_home = PLEASE_INSTALL_JDK8_BY_YOURSELF_AND_SET_THE_PATH
script =
  extract_dir = self.extract(self.download(self.options['url'], self.options['md5sum']))
  crosstool_path = os.path.join(extract_dir, 'tools', 'cpp', 'CROSSTOOL')
  os.chmod(crosstool_path, 0644)
  shutil.copy(self.options['bazel-crosstool-modified-file-path'],
              crosstool_path)
  target_path = extract_dir+'/src/main/java/com/google/devtools/build/lib/rules/SkylarkRuleImplementationFunctions.java'
  os.chmod(target_path, 0644)
  call([self.buildout['bazel']['patch-binary'], '-p1', '-d', extract_dir, '-i', self.buildout['bazel']['patch-file-path']])
  path = ':'.join((
    self.options['unzip-bin'],
    self.options['zip-bin'],
    self.options['gcc-bin'],
    os.environ['PATH']
    ))
  env = {'JAVA_HOME':self.options['java_home'],
         'PATH':path,
         'LD_LIBRARY_PATH':':'.join((
	   self.options['gcc-lib'],
	   self.options['gcc-lib64'],
           os.environ.get('LD_LIBRARY_PATH', '')
           )),
         'LDFLAGS':'-Wl,-rpath='+self.options['gcc-lib64'],
         'CC':self.options['gcc-bin']+'/gcc',
         'CXX':self.options['gcc-bin']+'/g++',
        }
  bin_dir = os.path.join(self.options['location'], 'bin')
  os.makedirs(bin_dir)
  call(['bash', 'compile.sh', 'compile'], cwd=extract_dir, env=env)
  shutil.copy(os.path.join(extract_dir, 'output', 'bazel'),
              os.path.join(bin_dir, 'bazel'))

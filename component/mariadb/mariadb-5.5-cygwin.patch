diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1bae7e8..a0c069f 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -311,10 +311,6 @@ IF(NOT WITHOUT_SERVER)
    ADD_SUBDIRECTORY(libmysqld/examples)
   ENDIF(WITH_EMBEDDED_SERVER)
 
-  ADD_SUBDIRECTORY(mysql-test)
-  ADD_SUBDIRECTORY(mysql-test/lib/My/SafeProcess)
-  ADD_SUBDIRECTORY(sql-bench)
-
   IF(EXISTS ${CMAKE_SOURCE_DIR}/internal/CMakeLists.txt)
     ADD_SUBDIRECTORY(internal)
   ENDIF()
diff --git a/client/mysql.cc b/client/mysql.cc
index 3cd078a..67b0142 100644
--- a/client/mysql.cc
+++ b/client/mysql.cc
@@ -60,8 +60,8 @@ static char *server_version= NULL;
 
 extern "C" {
 #if defined(HAVE_CURSES_H) && defined(HAVE_TERM_H)
-#include <curses.h>
-#include <term.h>
+#include <ncurses/curses.h>
+#include <ncurses/term.h>
 #else
 #if defined(HAVE_TERMIOS_H)
 #include <termios.h>
diff --git a/mysys/my_context.c b/mysys/my_context.c
index 08dc092..e4f28a2 100644
--- a/mysys/my_context.c
+++ b/mysys/my_context.c
@@ -213,7 +213,7 @@ my_context_spawn(struct my_context *c, void (*f)(void *), void *d)
        helps tools that use DWARF stack unwinding to obtain stack traces.
        (I use numeric constant to avoid a dependency on libdwarf includes).
      */
-     ".cfi_escape 0x07, 16\n\t"
+     /* ".cfi_escape 0x07, 16\n\t" */
 #endif
      "movq %%rbp, 8(%[save])\n\t"
      "movq %%rbx, 16(%[save])\n\t"
@@ -463,7 +463,7 @@ my_context_spawn(struct my_context *c, void (*f)(void *), void *d)
        helps tools that use DWARF stack unwinding to obtain stack traces.
        (I use numeric constant to avoid a dependency on libdwarf includes).
      */
-     ".cfi_escape 0x07, 8\n\t"
+     /* ".cfi_escape 0x07, 8\n\t" */
 #endif
      /* Push the parameter on the stack. */
      "pushl %[d]\n\t"
diff --git a/scripts/mysql_system_tables_data.sql b/scripts/mysql_system_tables_data.sql
index a222d22..a75ef36 100644
--- a/scripts/mysql_system_tables_data.sql
+++ b/scripts/mysql_system_tables_data.sql
@@ -31,8 +31,6 @@ SELECT REPLACE((SELECT REPLACE(@get_hostname,'_','\_')),'%','\%') INTO @current_
 -- Fill "db" table with default grants for anyone to
 -- access database 'test' and 'test_%' if "db" table didn't exist
 CREATE TEMPORARY TABLE tmp_db LIKE db;
-INSERT INTO tmp_db VALUES ('%','test','','Y','Y','Y','Y','Y','Y','N','Y','Y','Y','Y','Y','Y','Y','Y','N','N','Y','Y');
-INSERT INTO tmp_db VALUES ('%','test\_%','','Y','Y','Y','Y','Y','Y','N','Y','Y','Y','Y','Y','Y','Y','Y','N','N','Y','Y');
 INSERT INTO db SELECT * FROM tmp_db WHERE @had_db_table=0;
 DROP TABLE tmp_db;
 
@@ -44,8 +42,6 @@ INSERT INTO tmp_user VALUES ('localhost','root','','Y','Y','Y','Y','Y','Y','Y','
 REPLACE INTO tmp_user SELECT @current_hostname,'root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'','' FROM dual WHERE LOWER( @current_hostname) != 'localhost';
 REPLACE INTO tmp_user VALUES ('127.0.0.1','root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'','');
 REPLACE INTO tmp_user VALUES ('::1','root','','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','Y','','','','',0,0,0,0,'','');
-INSERT INTO tmp_user (host,user) VALUES ('localhost','');
-INSERT INTO tmp_user (host,user) SELECT @current_hostname,'' FROM dual WHERE LOWER(@current_hostname ) != 'localhost';
 INSERT INTO user SELECT * FROM tmp_user WHERE @had_user_table=0;
 DROP TABLE tmp_user;
 
diff --git a/sql/CMakeLists.txt b/sql/CMakeLists.txt
index 347cb09..a1d6dce 100644
--- a/sql/CMakeLists.txt
+++ b/sql/CMakeLists.txt
@@ -31,7 +31,7 @@ ${CMAKE_CURRENT_BINARY_DIR}/lex_hash.h
 
 SET_SOURCE_FILES_PROPERTIES(${GEN_SOURCES} PROPERTIES GENERATED 1)
 
-ADD_DEFINITIONS(-DMYSQL_SERVER -DHAVE_EVENT_SCHEDULER -DHAVE_POOL_OF_THREADS) 
+ADD_DEFINITIONS(-DMYSQL_SERVER -DHAVE_EVENT_SCHEDULER) 
 IF(SSL_DEFINES)
  ADD_DEFINITIONS(${SSL_DEFINES})
 ENDIF()
@@ -83,18 +83,11 @@ SET (SQL_SOURCE
                opt_index_cond_pushdown.cc opt_subselect.cc
                opt_table_elimination.cc sql_expression_cache.cc
                gcalc_slicescan.cc gcalc_tools.cc
-			   threadpool_common.cc 
 			   ../sql-common/mysql_async.c
                ${GEN_SOURCES}
                ${MYSYS_LIBWRAP_SOURCE}
 			   )
   
-IF(WIN32)
-  SET(SQL_SOURCE ${SQL_SOURCE} threadpool_win.cc)
-ELSE()
- SET(SQL_SOURCE ${SQL_SOURCE} threadpool_unix.cc)
-ENDIF()
-
 MYSQL_ADD_PLUGIN(partition ha_partition.cc STORAGE_ENGINE DEFAULT STATIC_ONLY
 RECOMPILE_FOR_EMBEDDED)
 
diff --git a/sql/scheduler.h b/sql/scheduler.h
index 4e200e8..2134344 100644
--- a/sql/scheduler.h
+++ b/sql/scheduler.h
@@ -99,14 +99,7 @@ public:
   void *data;                  /* scheduler-specific data structure */
 };
 
-#if !defined(EMBEDDED_LIBRARY)
-#define HAVE_POOL_OF_THREADS 1
-void pool_of_threads_scheduler(scheduler_functions* func,
-   ulong *arg_max_connections,
-   uint *arg_connection_count);
-#else
 #define pool_of_threads_scheduler(A,B,C) \
   one_thread_per_connection_scheduler(A, B, C)
-#endif
 
 #endif /* SCHEDULER_INCLUDED */
diff --git a/strings/dtoa.c b/strings/dtoa.c
index 6b21605..4bb5de9 100644
--- a/strings/dtoa.c
+++ b/strings/dtoa.c
@@ -51,7 +51,7 @@
 #define DTOA_OVERFLOW 9999
 
 static double my_strtod_int(const char *, char **, int *, char *, size_t);
-static char *dtoa(double, int, int, int *, int *, char **, char *, size_t);
+static char *x_dtoa(double, int, int, int *, int *, char **, char *, size_t);
 static void dtoa_free(char *, char *, size_t);
 
 /**
@@ -92,7 +92,7 @@ size_t my_fcvt(double x, int precision, char *to, my_bool *error)
   char buf[DTOA_BUFF_SIZE];
   DBUG_ASSERT(precision >= 0 && precision < NOT_FIXED_DEC && to != NULL);
   
-  res= dtoa(x, 5, precision, &decpt, &sign, &end, buf, sizeof(buf));
+  res= x_dtoa(x, 5, precision, &decpt, &sign, &end, buf, sizeof(buf));
 
   if (decpt == DTOA_OVERFLOW)
   {
@@ -221,7 +221,7 @@ size_t my_gcvt(double x, my_gcvt_arg_type type, int width, char *to,
   if (x < 0.)
     width--;
 
-  res= dtoa(x, 4, type == MY_GCVT_ARG_DOUBLE ? width : min(width, FLT_DIG),
+  res= x_dtoa(x, 4, type == MY_GCVT_ARG_DOUBLE ? width : min(width, FLT_DIG),
             &decpt, &sign, &end, buf, sizeof(buf));
   if (decpt == DTOA_OVERFLOW)
   {
@@ -327,7 +327,7 @@ size_t my_gcvt(double x, my_gcvt_arg_type type, int width, char *to,
         number of significant digits = (len-decpt) - (len-width) = width-decpt
       */
       dtoa_free(res, buf, sizeof(buf));
-      res= dtoa(x, 5, width - decpt, &decpt, &sign, &end, buf, sizeof(buf));
+      res= x_dtoa(x, 5, width - decpt, &decpt, &sign, &end, buf, sizeof(buf));
       src= res;
       len= end - res;
     }
@@ -393,7 +393,7 @@ size_t my_gcvt(double x, my_gcvt_arg_type type, int width, char *to,
     {
       /* Yes, re-convert with a smaller width */
       dtoa_free(res, buf, sizeof(buf));
-      res= dtoa(x, 4, width, &decpt, &sign, &end, buf, sizeof(buf));
+      res= x_dtoa(x, 4, width, &decpt, &sign, &end, buf, sizeof(buf));
       src= res;
       len= end - res;
       if (--decpt < 0)
@@ -2166,7 +2166,7 @@ static int quorem(Bigint *b, Bigint *S)
            calculation.
  */
 
-static char *dtoa(double dd, int mode, int ndigits, int *decpt, int *sign,
+static char *x_dtoa(double dd, int mode, int ndigits, int *decpt, int *sign,
                   char **rve, char *buf, size_t buf_size)
 {
   /*

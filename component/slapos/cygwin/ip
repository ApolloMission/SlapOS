# -*- coding: utf-8 -*-
##############################################################################
#
# Copyright (c) 2010, 2011, 2012 Vifib SARL and Contributors.
# All Rights Reserved.
#
# WARNING: This program as such is intended to be used by professional
# programmers who take the whole responsibility of assessing all potential
# consequences resulting from its eventual inadequacies and bugs
# End users who are looking for a ready-to-use solution with commercial
# guarantees and support are strongly advised to contract a Free Software
# Service Company
#
# This program is Free Software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 3
# of the License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
#
##############################################################################

# Simulate the command ip of Linux by netsh on the Windows.
#
# Usage: bash ip ...
#
#

#   ip addr list INTERFACE_NAME
#
#   => netsh interface ip show address [[name=]InterfaceName]
#  

#   ip link set INTERFACE_NAME up
#
#   => netsh interface set interface [name = ] INTERFACE_NAME
#            [ [admin = ] ENABLED|DISABLED
#              [connect = ] CONNECTED|DISCONNECTED
#              [newname = ] NewName ]
#

#
#   ip addr add ADDRESS_STRING dev INTERFACE_NAME
#
#   => netsh interface ip add address [name=]InterfaceName [addr=]IPAddress
#         [mask=]SubnetMask [[gateway=] DefaultGateway [gwmetric=]GatewayMetric]
#

#   ip addr del ADDRESS_STRING dev INTERFACE_NAME
#
#   => netsh interface ip delete address [name=]InterfaceName [addr=] IPAddress
#                     [[gateway=]{DefaultGateway | all}]
#

function transfercommand()
{
    IPCMD=`py -c "from netaddr.strategy import ipv4, ipv6
addr, prefix = '$ADDRESS_STRING'.split('/')
result = ''
if '.' in addr:
  mask = ipv4.int_to_str(ipv4.prefix_to_netmask[int(prefix)])
  if '$ACTION' == 'ADD':
      if prefix == '32':
          mask = '255.255.255.254'
      result = 'netsh interface ip add address name=\"$INTERFACE_NAME\" addr=%s mask=%s' % (addr, mask)
  elif '$ACTION' == 'DELETE':
      result = 'netsh interface ip delete address name=\"$INTERFACE_NAME\" addr=%s' % addr
else:
  mask = ipv6.int_to_str(ipv6.prefix_to_netmask[int(prefix)])
  if '$ACTION' == 'ADD':
      result = 'netsh interface ipv6 add address interface=\"$INTERFACE_NAME\" address=%s' % addr
  elif '$ACTION' == 'DELETE':
      result = 'netsh interface ipv6 delete address interface=\"$INTERFACE_NAME\" address=%s' % addr
print result"`
}

if [[ "$1" == "addr" ]]; then

  if [[ "$2" == "list" ]]; then

      INTERFACE_NAME=`guid2name $3`
      # getmac /V /FO table /NH | grep "${INTERFACE_NAME}" | sed -e "s/Disable/Down/g" | sed -e "s/Enbale/Up/g"
      # netsh interface ip show address name="${INTERFACE_NAME}"
      ipconfig /all | gawk "BEGIN { ok = 0; flag = 0; };  /adapter $INTERFACE_NAME/ { ok = 1; }; /^\\s*\$/ { if (ok) flag += 1; if (flag == 2)  { flag = 0; ok = 0; } }; { if (ok == 1) print \$0 }" | grep "IP Address"
      netsh interface ipv6 show address interface="${INTERFACE_NAME}"
      true

  elif [[ "$2" == "add" ]]; then

      ADDRESS_STRING="$3"
      ACTION=ADD
      INTERFACE_NAME=`guid2name $5`
      transfercommand
      $IPCMD

  elif [[ "$2" == "del" ]]; then

      ADDRESS_STRING="$3"
      ACTION=DELETE
      INTERFACE_NAME=`guid2name $5`
      transfercommand
      $IPCMD

  fi

elif [[ "$1" == "link" ]]; then

  INTERFACE_NAME=`guid2name $4`
  netsh interface set interface "${INTERFACE_NAME}" enabled connected

fi



[buildout]
parts =
  directory
  certificate-authority
  gunicorn-launcher
  gunicorn-graceful
  ca-nginx
  nginx_conf
  nginx-launcher
  nginx-promise
  flask-promise
  symlinks
  base-server
  base-module
  copy-git-project
  git-change-origin
  
eggs-directory = ${buildout:eggs-directory}
develop-eggs-directory = ${buildout:develop-eggs-directory}

[directory]
recipe = slapos.cookbook:mkdirectory
etc = $${buildout:directory}/etc/
var = $${buildout:directory}/var/
srv = $${buildout:directory}/srv/
bin = $${buildout:directory}/bin/
tmp = $${buildout:directory}/tmp/

services = $${:etc}/service/
scripts = $${:etc}/run/
www = $${:var}/www
promises = $${:etc}/promise/
run = $${:var}/run/
log = $${:var}/log/
nginx-data = $${:srv}/nginx/
ca-dir = $${:srv}/ssl

#---------------------------
#--
#-- setup nginx

[tempdirectory]
recipe = slapos.cookbook:mkdirectory
client_body_temp_path = $${directory:tmp}/client_body_temp_path
proxy_temp_path = $${directory:tmp}/proxy_temp_path
fastcgi_temp_path = $${directory:tmp}/fastcgi_temp_path
uwsgi_temp_path = $${directory:tmp}/uwsgi_temp_path
scgi_temp_path = $${directory:tmp}/scgi_temp_path

[nginx-frontend]
# Network
local-ip = $${slap-network-information:local-ipv4}
port = 50006
global-ip = $${slap-network-information:global-ipv6}
# SSL
ssl-certificate = $${ca-nginx:cert-file}
ssl-key = $${ca-nginx:key-file}
# Log
path_pid = $${directory:run}/nginx.pid
path_log = $${directory:log}/nginx.log
path_access_log = $${directory:log}/nginx.access.log
path_error_log = $${directory:log}/nginx.error.log
path_tmp = $${buildout:directory}/tmp
# Config files
path_nginx_conf = $${directory:etc}/nginx.conf
# Executables
bin_nginx = ${nginx:location}/sbin/nginx
bin_launcher = $${directory:bin}/nginx
# Utils
path_shell = ${dash:location}/bin/dash
# Misc.
etc_dir = $${directory:etc}

[nginx_conf]
recipe = slapos.recipe.template:jinja2
template = ${template_nginx_conf:location}/${template_nginx_conf:filename}
rendered = $${nginx-frontend:path_nginx_conf}
context =
    section param_nginx_frontend nginx-frontend
    section param_tempdir tempdirectory
    key socket gunicorn-frontend:socket
    
[nginx-launcher]
recipe = slapos.recipe.template:jinja2
template = ${nginx_template_launcher:location}/${nginx_template_launcher:filename}
rendered = $${nginx-frontend:bin_launcher}
mode = 700
context =
    section param_nginx_frontend nginx-frontend

#---------------------
#--
#--WSGI

[gunicorn-frontend]
bin_gunicorn = $${directory:bin}/gunicorn
bin_launcher = $${directory:services}/gunicorn
path_shell = ${dash:location}/bin/dash
socket = $${directory:tmp}/flaskserver.sock
path_pid = $${directory:run}/gunicorn.pid
  
[gunicorn-launcher]
recipe = slapos.cookbook:wrapper
command-line = $${gunicorn-frontend:bin_gunicorn} www:app -p $${gunicorn-frontend:path_pid} -b unix:$${gunicorn-frontend:socket}
wrapper-path = $${gunicorn-frontend:bin_launcher}
environment = PYTHONPATH=$PYTHONPATH:$${directory:var}

[gunicorn-graceful]
recipe = slapos.cookbook:wrapper
command-line = $${directory:bin}/killpidfromfile $${gunicorn-frontend:path_pid} SIGHUP
wrapper-path = $${directory:scripts}/gunicorn-graceful

#--------------------
#--
#-- ssl certificates

[certificate-authority]
recipe = slapos.cookbook:certificate_authority
openssl-binary = ${openssl:location}/bin/openssl
ca-dir = $${directory:ca-dir}
requests-directory = $${cadirectory:requests}
wrapper = $${directory:services}/certificate_authority
ca-private = $${cadirectory:private}
ca-certs = $${cadirectory:certs}
ca-newcerts = $${cadirectory:newcerts}
ca-crl = $${cadirectory:crl}

[cadirectory]
recipe = slapos.cookbook:mkdirectory
requests = $${directory:ca-dir}/requests/
private = $${directory:ca-dir}/private/
certs = $${directory:ca-dir}/certs/
newcerts = $${directory:ca-dir}/newcerts/
crl = $${directory:ca-dir}/crl/

[ca-nginx]
<= certificate-authority
recipe = slapos.cookbook:certificate_authority.request
key-file = $${cadirectory:certs}/nginx_frontend.key
cert-file = $${cadirectory:certs}/nginx_frontend.crt
executable = $${nginx-launcher:rendered}
wrapper = $${directory:services}/nginx-frontend
# Put domain name
name = example.com

#copy in var/www the minimum files to create a flask application
[base-server]
recipe = hexagonit.recipe.download
url = ${server_base_py:location}/${server_base_py:filename}
#md5sum = 
download-only = true
destination = $${directory:www}
mode = 0644

[base-module]
recipe = hexagonit.recipe.download
url = ${module_base_py:location}/${module_base_py:filename}
#md5sum = 
download-only = true
destination = $${directory:www}
mode = 0644

[copy-git-project]
recipe = slapos.recipe.build:gitclone
repository = ${git-user:location}
location = $${directory:www}
git-executable = ${git-user:git-executable}

[git-change-origin]
recipe = collective.recipe.cmd
on_install = true
on_update = false
cmds =
  cd $${directory:www}
  ${git-user:git-executable} remote set-url origin ${git-user:repository}


# check promises
[nginx-promise]
recipe = slapos.cookbook:check_port_listening
path = $${directory:promises}/nginx
hostname = $${nginx-frontend:global-ip}
port = $${nginx-frontend:port}

[flask-promise]
recipe = slapos.cookbook:check_url_available
path = $${directory:promises}/flask
url = https://[$${nginx-frontend:global-ip}]:$${nginx-frontend:port}
dash_path = ${dash:location}/bin/dash
curl_path = ${curl:location}/bin/curl

[symlinks]
recipe = cns.recipe.symlink
symlink_target = $${directory:bin}
symlink_base = ${buildout:directory}/bin
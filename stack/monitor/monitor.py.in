#!/usr/bin/python

import json
import os
import subprocess
import sys
import time
from optparse import OptionParser

promise_dir = "{{ directory['promise'] }}"
service_dir = "{{ directory['service'] }}"
monitor_dir = "{{ directory['monitor'] }}"
instance_path = "{{ directory['home'] }}"

def getListOfScripts():
  scripts = []
  for dir in (promise_dir, monitor_dir):
    if os.path.exists(dir) and os.path.isdir(dir):
      for file in os.listdir(dir):
        scripts.append(os.path.join(dir, file))
  if scripts:
    return scripts
  else:
    exit("There is a problem in your directories" \
          "of monitoring. Please check them")

def run():
  scripts = getListOfScripts()
  script_timeout = 3
  failed_scripts = []
  failed_bool = False
  for script_path in scripts:
    command = [os.path.join(promise_dir, script_path)]
    script = os.path.basename(command[0])
    
    process_handler = subprocess.Popen(command,
                                       cwd=instance_path,
                                       env=None if sys.platform == 'cygwin' else {},
                                       stdout=subprocess.PIPE,
                                       stderr=subprocess.PIPE,
                                       stdin=subprocess.PIPE)
    process_handler.stdin.flush()
    process_handler.stdin.close()
    process_handler.stdin = None

    time.sleep(script_timeout)

    if process_handler.poll() is None:
      process_handler.terminate()
      failed_bool = True
      failed_scripts.append({script_path : "Time Out"})
    elif process_handler.poll() != 0:
      stderr = process_handler.communicate()[1]
      if stderr is not None:
        failed_bool = True
        failed_scripts.append({script_path : stderr.strip()})
  return failed_scripts


if __name__ == "__main__":
  parser = OptionParser()
  parser.add_option("-v", "--verbose", action="store_true", dest="verbose",
                    help="return a json containing info for each monitored script")
  (options, args) = parser.parse_args()
  fails = run()
  if options.verbose:
    print fails
  elif len(fails) == 0:
    print 0
    exit(0)
  else:
    print 1
    exit(1)
{% if slap_software_type == software_type -%}
{% set part_list = [] -%}
#############################
#
# Request erp5 production environnment
#
#############################
[request-common]
recipe = slapos.cookbook:request
software-url = ${slap-connection:software-release-url}
sla = computer_guid
return = url
server-url = ${slap-connection:server-url}
key-file = ${slap-connection:key-file}
cert-file = ${slap-connection:cert-file}
computer-id = ${slap-connection:computer-id}
partition-id = ${slap-connection:partition-id}

[request-sphinx]
<=request-common
name = Sphinx Search Engine
software-type = sphinx
sla-computer_guid = ${slap-parameter:sphinx-computer-guid}
return = url-sphinx url-sphinx-sql

[request-mariadb]
<=request-common
name = MariaDB DataBase
software-type = mariadb
sla-computer_guid = ${slap-parameter:mariadb-computer-guid}

[request-cloudooo]
<=request-common
name = Cloudooo
config = cloudooo-json
config-cloudooo-json = ${slap-parameter:cloudooo-json}
software-type = cloudooo
sla-computer_guid = ${slap-parameter:cloudooo-computer-guid}

[request-memcached]
<=request-common
name = Memcached
software-type = memcached
sla-computer_guid = ${slap-parameter:memcached-computer-guid}

[request-kumofs]
<=request-common
name = KumoFS
software-type = kumofs
sla-computer_guid = ${slap-parameter:kumofs-computer-guid}

[request-zope-base]
<=request-common
return =
  zope-address-list
config =
  mysql-url
  memcached-url
  cloudooo-url
  kumofs-url
  sphinx-url-sphinx
  sphinx-url-sphinx-sql
  smtp-url
  bt5
  bt5-repository-url
  zodb-dict
  tidstorage-ip
  tidstorage-port
  zope-instance-number
config-mysql-url = ${request-mariadb:connection-url}
config-memcached-url = ${request-memcached:connection-url}
config-cloudooo-url = ${request-cloudooo:connection-url}
config-kumofs-url = ${request-kumofs:connection-url}
config-sphinx-url-sphinx = ${request-sphinx:connection-url-sphinx}
config-sphinx-url-sphinx-sql = ${request-sphinx:connection-url-sphinx-sql}
config-bt5 = ${slap-parameter:bt5}
config-bt5-repository-url = ${slap-parameter:bt5-repository-url}
config-smtp-url = ${slap-parameter:smtp-url}
config-zodb-dict = ${request-zodb:connection-zodb-dict}
config-tidstorage-ip = ${request-zodb:connection-tidstorage-ip}
config-tidstorage-port = ${request-zodb:connection-tidstorage-port}
software-type = production-zope

[slap-parameter]
# Default value if no computer_guid is specified for each type
sphinx-computer-guid = ${slap-connection:computer-id}
mariadb-computer-guid = ${slap-connection:computer-id}
cloudooo-computer-guid = ${slap-connection:computer-id}
memcached-computer-guid = ${slap-connection:computer-id}
kumofs-computer-guid = ${slap-connection:computer-id}
zodb-computer-guid = ${slap-connection:computer-id}
cloudooo-json =
bt5 = erp5_full_text_myisam_catalog
  erp5_configurator_standard
  erp5_configurator_maxma_demo
  erp5_configurator_ung
  erp5_configurator_run_my_doc
bt5-repository-url = {{ local_bt5_repository }}
smtp-url = smtp://localhost:25/

[basedirectory]
recipe = slapos.cookbook:mkdirectory
etc = ${buildout:directory}/etc/run

[request-zodb]
< = request-common
return =
  zodb-storage-type
# (str)
# Storage type, suitable for zope.conf (ex: "zeoclient").
  zodb-dict
# (dict)
# key (str)
#   (same as config-zodb-dict)
# value (dict)
#   Storage-type-specific parameters, suitable for zope.conf.
#   key & value: str
#   Ex: {'server': 'example.com:8100', 'storage': '1'}
  tidstorage-ip
# self-explaining
  tidstorage-port
# self-explaining
config =
  zodb-dict
# (dict)
# ZODBs to provide.
# key (str)
#   Zope internal name for this ZODB. Used to tell mountpoints apart.
# value (dict)
#   key (str)
#     Possible keys and associated value types:
#     "storage_ident" (str, optional)
#       Storage identifier. All zodbs requested with the same storage_ident value
#       are provided by the same service (ex: same ZEO process). Might not be
#       supported by all storage_types, silently ignored if so.
#       Defaults to "default" if not provided.
#     "storage_dict" (dict, optional)
#       Storage-type-specific parameters. For example, it can be used to tell where
#       a ZEO filestorage database is located.
  tidstorage-dict
# (dict, optional)
# Backup parameters for tidstorage-related backup scripts.
# Set to None if no backup is desired.
# key (str)
#   Possible keys and associated value types:
#   "zodb_dict" (dict, mandatory)
#     key (str)
#       (same as zodb-dict)
#     value (dict)
#       key (str)
#         Possible keys and associated value types:
#         "url_substitute" (str, mandatory)
#           Value to substitute to "%s" in tidstorage-base-url-template to
#           trigger a no-op change in storage.
#         "path" (str, optional)
#           Path to store backups of this zodb into.
#   "timestamp_path" (str, optional)
#     Path to backup timestamp file.
  tidstorage-base-url-template
# (str, None)
# URL template base used by TIDStorage to modify all mountpoints upon startup.
# ex: 'http://example.com:1080/%s/serialize'
# Note that it needs to contain exactly one "%s" conversion specification,
# which gets substituted with ZODB mountpoint by TIDStorage server.
# Ignored when tidstorage-dict is None.
{# TODO: make libslap able to generate nested, complex values without having to resort to SR-level parsing -#}
config-zodb-dict = {{ json_module.loads(slapparameter_dict['zodb-dict']) }}
config-tidstorage-dict = {{ slapparameter_dict.get('tidstorage-dict') }}
# TODO: auto-generate from one zope (distributing node)
config-tidstorage-base-url-template = {{ slapparameter_dict.get('tidstorage-base-url-template') }}
software-type = {{ slapparameter_dict['zodb-software-type'] }}
sla-computer_guid = ${slap-parameter:zodb-computer-guid}

{% set i = 0 -%}
{% set zope_family_dict = {} -%}
{% for instance_count, zope_parameter_dict in json_module.loads(slapparameter_dict.get('zope-partition-list', '[[1, {}]]')) -%}
{%   set name = 'zope-' ~ i -%}
{%   set i = i + 1 -%}
{%   do zope_family_dict.setdefault(zope_parameter_dict.get('family'), []).append(name) -%}
[{{ name }}]
< = request-zope-base
name = {{ name }}
config-zope-instance-count = {{ instance_count }}
sla-computer_guid = {{ zope_parameter_dict.get('computer_guid', '${slap-connection:computer-id}') }}
{% endfor %}
[request-backend-base]
< = request-common
return = url
config =
  zope-address-list
  haproxy-maxconn
  haproxy-server-check-path
  apache-access-control-string
  apache-ssl-authentication
  apache-backend-path
  ca
# XXX: should those really be same for all backends ?
config-haproxy-maxconn = {{ slapparameter_dict.get('haproxy-maxconn', 1) }}
config-haproxy-server-check-path = {{ slapparameter_dict.get('haproxy-server-check-path', '/') }}
config-apache-access-control-string = {{ slapparameter_dict.get('apache-access-control-string', '') }}
config-apache-ssl-authentication = {{ slapparameter_dict.get('apache-ssl-authentication', '0') }}
config-apache-backend-path = {{ slapparameter_dict.get('apache-backend-path', '/') % {'site_id': slapparameter_dict['site_id']} }}
config-ca = {{ json_module.loads(slapparameter_dict['ca']) }}

[request-frontend-base]
{% if 'frontend-software-url' in slapparameter_dict -%}
< = request-common
software-url = {{ slapparameter_dict['frontend-software-url'] }}
software-type = {{ slapparameter_dict.get('frontend-software-type', 'RootSoftwareInstance') }}
sla = instance_guid
sla-instance_guid = {{ slapparameter_dict['frontend-instance-guid'] }}
slave = true
{% set config_dict = {
  'type': 'zope',
} -%}
{% if 'frontend-domain' in slapparameter_dict -%}
{%   do config_dict.__setitem__('custom_domain', slapparameter_dict['frontend-domain']) -%}
{% endif -%}
config = url {{ config_dict.keys() | join(' ') }}
{% for name, value in config_dict.items() -%}
config-{{ name }} = {{ value }}
{% endfor -%}
return = site_url
{% endif -%}

{% set i = 0 -%}
{% for zope_section_id_list in zope_family_dict.values() -%}
{%   set backend_name = 'backend-' ~ i -%}
{%   set frontend_name = 'frontend-' ~ i -%}
{%   do part_list.append(frontend_name) -%}
{%   set i = i + 1 -%}
[{{ backend_name }}]
< = request-backend-base
name = {{ backend_name }}
config-zope-address-list =
{% for zope_section_id in zope_section_id_list %}{{ '    ${' ~ zope_section_id ~ ':connection-zope-address-list}' }}{% endfor %}

[{{ frontend_name }}]
< = request-frontend-base
name = {{ frontend_name }}
config-url = {{ '${' ~ backend_name ~ ':connection-url}' }}
{% endfor %}
[buildout]
parts =
  basedirectory
  {{ part_list | join('\n  ') }}

eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true
{% endif %}

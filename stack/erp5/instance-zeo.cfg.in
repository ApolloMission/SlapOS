{% if software_type == slap_software_type -%}
{% set current_port = 2000 -%}
{% set part_list = [] -%}
{% set zeo_dict = {} -%}
{% set zodb_list = [] -%}
{% set known_tid_storage_identifier_dict = {} -%}
{% macro section(name) %}{% do part_list.append(name) %}{{ name }}{% endmacro -%}
{% macro zodb(base_name, storage_type, port) -%}
{% endmacro -%}
{#
XXX: This template only supports exactly one IPv6 per
partition. No more (undefined result), no less (IndexError).
-#}
{% set ipv4 = (ipv4_set | list)[0] -%}
{% set ipv6 = (ipv6_set | list)[0] -%}
{% set tidstorage_ip = ipv4 -%}
{% set tidstorage_port = 6001 -%}
{% set bin_directory = parameter_dict['buildout-bin-directory'] -%}

[zeo-base]
recipe = slapos.cookbook:zeo
log-path = ${directory:log}/${:base-name}.log
pid-path = ${directory:run}/${:base-name}.pid
conf-path = ${directory:etc}/${:base-name}.conf
wrapper-path = ${directory:services}/${:base-name}
binary-path = {{ bin_directory }}/runzeo
# TODO: check ipv4 actually works
# TODO: setup ZEO secure auth & cryptography
ip = {{ ipv4 }}

[ipv6toipv4-base]
recipe = slapos.cookbook:ipv6toipv4
runner-path = ${directory:services}/${:base-name}
tunnel6-path = {{ parameter_dict['tunnel6'] }}/bin/6tunnel
shell-path = {{ parameter_dict['dash'] }}/bin/dash
ipv4 = {{ ipv4 }}
ipv6 = {{ ipv6 }}

{% for export_id, mountpoint_dict in json_module.loads(slapparameter_dict['zodb-dict']).items() -%}
{%   do zeo_dict.setdefault(
       mountpoint_dict.get('storage_ident', 'default'), []
     ).append((
       export_id,
       mountpoint_dict.get('storage_dict', {}),
     )) -%}
{% endfor -%}


{% set next_current_port = {'next_port': current_port} -%}
{% for storage_ident, export_list in zeo_dict.items() -%}
{%   set key_template = (('' ~ ipv4, current_port),) -%}
{%   set storage_list = [] -%}
{%   for export_id, storage_dict in export_list -%}

{%     do storage_list.append("storage-name=%s zodb-path=${directory:zodb}/%s.fs" % (export_id, export_id)) -%}

{%     do storage_dict.__setitem__('server', '[' ~ ipv6 ~ ']:' ~ current_port) -%}
{%     do storage_dict.__setitem__('storage', export_id) -%}
{%     do storage_dict.__setitem__('name', export_id) -%}
{%     do zodb_list.append([
           export_id,
           storage_dict.pop('mount-point', ''),
           storage_dict.pop('zope-cache-size', ''),
           'zeoclient',
           storage_dict
       ]) -%}

{%     do known_tid_storage_identifier_dict.__setitem__(
         json_module.dumps((key_template, export_id )), (
           "${directory:zodb}/%s.fs" % export_id,
           "${directory:backup-zodb}/%s" % export_id,
           zodb_list[-1][1],
       )) -%}

{#     TODO: generate sane defaults for zeo_dict['path'] and tidstorage_dict[export_id]['path'] -#}


{%   endfor -%}
[{{ section("instanciate-zeo-" + storage_ident) }}]
< = zeo-base
base-name = zeo-{{ storage_ident }}
port = {{ current_port }}
storage = 
  {{ storage_list | join('\n  ') }}

[{{ section("instanciate-zeo-" + storage_ident + "-tunnel") }}]
< = ipv6toipv4-base
base-name = zeo-{{ storage_ident }}-tunnel
ipv6-port = {{ current_port }}
ipv4-port = {{ current_port }}

[{{ section("promise-zeo-" + storage_ident) }}]
recipe = slapos.cookbook:check_port_listening
hostname = {{ "${instanciate-zeo-" + storage_ident + ":ip}" }}
port = {{ current_port }}
path = ${directory:promises}/zeo-{{ storage_ident }}

[{{ section("promise-zeo-" + storage_ident + "-tunnel") }}]
recipe = slapos.cookbook:check_port_listening
hostname = {{ "${instanciate-zeo-" + storage_ident + "-tunnel:ipv6}" }}
port = {{ current_port }}
path = ${directory:promises}/zeo-{{ storage_ident }}-tunnel

{%   set current_port = current_port + 1 -%}
{%   do next_current_port.__setitem__('next_port', current_port) -%}
{% endfor -%}
{% set current_port = next_current_port['next_port'] -%}

[tidstorage]
recipe = slapos.cookbook:tidstorage
known-tid-storage-identifier-dict = {{ json_module.dumps(known_tid_storage_identifier_dict) }}
configuration-path = ${directory:etc}/tidstorage.py
ip = {{ tidstorage_ip }}
port = {{ tidstorage_port }}
timestamp-file-path = ${directory:tidstorage}/repozo_tidstorage_timestamp.log
logfile-name = ${directory:log}/tidstorage.log
pidfile-name = ${directory:run}/tidstorage.pid
status-file = ${directory:tidstorage}/tidstorage.tid
tidstorage-repozo-binary = {{ bin_directory }}/tidstorage_repozo
tidstoraged-binary = {{ bin_directory }}/tidstoraged
repozo-binary = {{ bin_directory }}/repozo
tidstorage-wrapper = ${directory:services}/tidstoraged
repozo-wrapper = ${buildout:bin-directory}/tidstorage-repozo
# TODO: stunnel/TLS

[{{ section("tidstorage-tunnel") }}]
< = ipv6toipv4-base
base-name = tidstorage-tunnel
ipv6-port = {{ current_port }}
ipv4-port = ${tidstorage:port}
{% set current_port = current_port + 1 -%}

[{{ section("promise-tidstorage") }}]
recipe = slapos.cookbook:check_port_listening
hostname = ${tidstorage:ip}
port = ${tidstorage:port}
path = ${directory:promises}/tidstorage

[{{ section("promise-tidstorage-tunnel") }}]
recipe = slapos.cookbook:check_port_listening
hostname = ${tidstorage-tunnel:ipv6}
port = ${tidstorage-tunnel:ipv6-port}
path = ${directory:promises}/tidstorage

[{{ section("cron-entry-tidstorage-backup") }}]
# TODO:
# - configurable periodicity
# - configurable full/incremental
# - configurable retention
recipe = slapos.cookbook:cron.d
cron-entries = ${cron:cron-entries}
name = tidstorage
frequency = 0 0 * * *
command = ${tidstorage:repozo-wrapper}

[logrotate-tidstorage]
recipe = slapos.cookbook:logrotate.d
logrotate-entries = ${logrotate:logrotate-entries}
backup = ${logrotate:logrotate-backup}
name = tidstorage
log = ${tidstorage:logfile-name}
post = {{ bin_directory }}/killpidfromfile ${tidstorage:pidfile-name} SIGHUP

[publish]
recipe = slapos.cookbook:publish
zodb-list = {{ json_module.dumps(zodb_list) }}
tidstorage-ip = ${tidstorage-tunnel:ipv6}
tidstorage-port = ${tidstorage-tunnel:ipv6-port}

[directory]
recipe = slapos.cookbook:mkdirectory
etc = ${buildout:directory}/etc
services = ${:etc}/run
promises = ${:etc}/promise
srv = ${buildout:directory}/srv
backup = ${:srv}/backup
backup-zodb = ${:backup}/zodb
tidstorage = ${:run}/tidstorage
zodb = ${:srv}/zodb
var = ${buildout:directory}/var
log = ${:var}/log
run = ${:var}/run

[buildout]
extends =
  {{ parameter_dict['instance-logrotate-cfg'] }}
parts +=
  {{ part_list | join('\n  ') }}
  publish
eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true

{% endif %}

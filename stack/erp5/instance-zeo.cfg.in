{% if software_type == slap_software_type -%}
{% set current_port = 2000 -%}
{% set part_list = [] -%}
{% set storage_dict = {} -%}
{% set zodb_dict = {} -%}
{% set tidstorage_dict = slapparameter_dict.get('tidstorage-dict') -%}
{% set known_tid_storage_identifier_dict = {} -%}
{% macro section(name) %}{% do part_list.append(name) %}{{ name }}{% endmacro -%}
{% macro zodb(base_name, storage_type, port) -%}
{% endmacro -%}
{#
XXX: This template only supports exactly one IPv6 per
partition. No more (undefined result), no less (IndexError).
-#}
{% set ipv6 = (ipv6_set | list)[0] -%}
{% set tidstorage_ip = ipv6 -%}
{% set tidstorage_port = 6001 -%}
{% set bin_directory = parameter_dict['buildout-bin-directory'] -%}
[buildout]
extends =
  {{ parameter_dict['instance-logrotate-cfg'] }}
parts +=
  publish
eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true

[zeo-base]
recipe = slapos.cookbook:zeo
log-path = ${directory:log}/${:base-name}.log
pid-path = ${directory:run}/${:base-name}.pid
conf-path = ${directory:etc}/${:base-name}.conf
wrapper-path = ${directory:services}/${:base-name}
binary-path = {{ bin_directory }}/runzeo
# TODO: check ipv6 actually works
# TODO: setup ZEO secure auth & cryptography
ip = {{ ipv6 }}

{% for export_id, mountpoint_dict in slapparameter_dict['zodb-dict'].items() -%}
{%   do storage_dict.setdefault(
       mountpoint_dict.get('storage_ident', 'default'), []
     ).append((
       export_id,
       mountpoint_dict.get('storage_dict', {}),
     )) -%}
{% endfor -%}
{% for storage_ident, export_list in storage_dict.items() -%}
{%   set key_template = "((('" ~ tidstorage_ip ~ "', " ~ tidstorage_port ~ "),), '%s')" -%}
{%   for export_id, storage_dict in export_list -%}
{%     do zodb_dict.__setitem__(export_id, {
         'server': ipv6 ~ ':' ~ current_port,
         'storage': export_id,
       }) -%}
{#     TODO: generate sane defaults for storage_dict['path'] and tidstorage_dict[export_id]['path'] -#}
{%     if tidstorage_dict -%}
{%       do known_tid_storage_identifier_dict.__setitem__(key_template % (export_id, ), (
           storage_dict['path'],
           tidstorage_dict[export_id]['path'],
           tidstorage_dict[export_id]['url_substitute'],
         )) -%}
{%     endif -%}
{%   endfor -%}
[{{ section(base_name) }}]
< = zeo-base
base-name = zeo-{{ storage_ident }}
port = {{ current_port }}
storage = {{ dumps(export_list) }}
{%   set current_port = current_port + 1 -%}
{% endfor -%}

{% if tidstorage_dict -%}
[tidstorage]
recipe = slapos.cookbook:tidstorage
known-tid-storage-identifier-dict = {{ known_tid_storage_identifier_dict }}
base-url = {{ slapparameter_dict['tidstorage-base-url-template'] }}
configuration-path = ${directory:etc}/tidstorage.py
ip = {{ tidstorage_ip }}
port = {{ tidstorage_port }}
timestamp-file-path = ${directory:tidstorage}/repozo_tidstorage_timestamp.log
logfile-name = ${directory:log}/tidstorage.log
pidfile-name = ${directory:run}/tidstorage.pid
status-file = ${directory:tidstorage}/tidstorage.tid
tidstorage-repozo-binary = {{ bin_directory }}/tidstorage_repozo
tidstoraged-binary = {{ bin_directory }}/tidstoraged
repozo-binary = {{ bin_directory }}/repozo
tidstorage-wrapper = ${directory:services}/tidstoraged
repozo-wrapper = ${buildout:bin-directory}/tidstorage-repozo
# TODO: stunnel/TLS

[cron-entry-tidstorage-backup]
# TODO:
# - configurable periodicity
# - configurable full/incremental
# - configurable retention
recipe = slapos.cookbook:cron.d
cron-entries = ${cron:cron-entries}
name = tidstorage
frequency = 0 0 * * *
command = ${tidstorage:repozo-wrapper}

[logrotate-tidstorage]
recipe = slapos.cookbook:logrotate.d
logrotate-entries = ${logrotate:logrotate-entries}
backup = ${logrotate:logrotate-backup}
name = tidstorage
log = ${tidstorage:logfile-name}
post = {{ bin_directory }}/killpidfromfile ${tidstorage:pidfile-name} SIGHUP

{% else -%}
[tidstorage]
# Dummy section, backups are disabled
ip =
port =

{% endif -%}
[publish]
recipe = slapos.cookbook:publish
zodb-storage-type = zeoclient
zodb-dict = {{ dumps(zodb_dict) }}
tidstorage-ip = ${tidstorage:ip}
tidstorage-port = ${tidstorage:port}

[directory]
recipe = slapos.cookbook:mkdirectory
etc = ${buildout:directory}/etc
services = ${:etc}/run
srv = ${buildout:directory}/run
tidstorage = ${:srv}/tidstorage
var = ${buildout:directory}/var
log = ${:var}/log
run = ${:var}/run

{% endif %}

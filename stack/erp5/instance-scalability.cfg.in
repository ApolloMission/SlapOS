{% if slap_software_type == software_type -%}
[buildout]
parts =
  erp5-cluster
  launcher
  binary-wrap-launcher
  
eggs-directory = {{ eggs_directory }}
develop-eggs-directory = {{ develop_eggs_directory }}
offline = true

[erp5-cluster]
recipe = slapos.cookbook:request.serialised
sla = computer_guid
server-url = ${slap-connection:server-url}
key-file = ${slap-connection:key-file}
cert-file = ${slap-connection:cert-file}
computer-id = ${slap-connection:computer-id}
partition-id = ${slap-connection:partition-id}
name = ERP5 Cluster
software-url = ${slap-connection:software-release-url}
software-type = cluster
sla-computer_guid = {{ slapparameter_dict.get('launcher-computer-guid', computer_id) }}
config =
  use-ipv6
  ${:extra-config}
extra-config =
config-use-ipv6 = {{ dumps(slapparameter_dict.get('use-ipv6', False)) }}


# Create bin
[launcher]
scripts =
  runScalabilityTestSuite = erp5.util.scalability.scalability_launcher:main
log-path = ${basedirectory:log}/runScalabilityTestSuite.log
binary-path = ${:bin-directory}/runScalabilityTestSuite
# Create wrapper and execute command with parameters
[binary-wrap-launcher]
recipe = slapos.cookbook:wrapper
wrapper-path = ${rootdirectory:bin}/launcher
output = ${launcher:binary-path}
command-line = "${binary-wrap-launcher:wrapper-path} --log ${launcher:log-path} --help"
return = url




[basedirectory]
recipe = slapos.cookbook:mkdirectory
log = ${rootdirectory:var}/log

[rootdirectory]
recipe = slapos.cookbook:mkdirectory
etc = ${buildout:directory}/etc
var = ${buildout:directory}/var
bin = ${buildout:directory}/bin

{% endif %}
